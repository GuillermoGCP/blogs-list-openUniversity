const { test, describe, after, beforeEach } = require('node:test')
const assert = require('node:assert')
const supertest = require('supertest')
const data = require('./dataToTest.js')
const app = require('../../index.js')
const Blog = require('../db/models/Blog.js')
const User = require('../db/models/User.js')
const mongoose = require('mongoose')
const invalidIdGenerator = require('../utils/invalidIdGenerator.js')
const listHelper = require('../utils/list_helper.js')

const api = supertest(app)

const logUser = async (
  logData = {
    username: data.newUser.username,
    password: data.newUser.password,
  }
) => {
  const loggedUser = await api.post('/api/users/login').send(logData)
  return `Bearer ${loggedUser.body.token}`
}

const createBlog = async (token, dataToTest, status) => {
  const response = await api
    .post('/api/blogs')
    .set('Authorization', token)
    .send(dataToTest)
    .expect(status)
    .expect('Content-Type', /application\/json/)

  return response.body
}
const deleteBlog = async (token, id, status) => {
  const response = await api
    .delete(`/api/blogs/${id}`)
    .set('Authorization', token)
    .expect(status)

  return response.body
}

const updateBlog = async (id, token, dataToUpdate, status) => {
  const response = await api
    .put(`/api/blogs/${id}`)
    .set('Authorization', token)
    .send(dataToUpdate)
    .expect(status)
    .expect('Content-Type', /application\/json/)
  return response.body
}

describe('blogs requests', () => {
  beforeEach(async () => {
    await Blog.deleteMany({})
    await Blog.insertMany(data.bigList)
    await User.deleteMany({})
    await listHelper.createUser()
  })

  test('blogs are returned as json', async () => {
    const response = await api
      .get('/api/blogs')
      .expect(200)
      .expect('Content-Type', /application\/json/)
    assert.ok(Array.isArray(response.body), 'Response must be an array')
  })

  test('all blogs are returned', async () => {
    const response = await api.get('/api/blogs')

    assert.strictEqual(
      response.body.length,
      data.bigList.length,
      'Expected the number of blogs to be six'
    )
  })

  test('id property verification', async () => {
    const response = await api.get('/api/blogs')
    response.body.forEach((blog) => {
      assert.ok(blog.hasOwnProperty('id'))
    })
  })

  test('a valid blog is added', async () => {
    const token = await logUser()
    await createBlog(token, data.newBlog, 201)
    const response = await api.get('/api/blogs')

    assert.deepStrictEqual(
      response.body.length,
      data.bigList.length + 1,
      'The number of blogs in the database was expected to be equal to the number of blogs in bigList plus one'
    )

    const addedBlog = response.body.find(
      (blog) => blog.title === data.newBlog.title
    )
    assert.ok(addedBlog, 'The blog has not been added to the database')
  })

  test('if a blog is submitted without the Like property, the system will default to Like: 0', async () => {
    const token = await logUser()
    const response = await createBlog(token, data.blogWithoutLikes, 201)

    assert.deepStrictEqual(response.likes, 0, 'Expected likes value to be zero')
  })
  test('if a blog is submitted without the URL property, the system will respond with a 400 Bad Request status', async () => {
    const token = await logUser()
    const response = await createBlog(token, data.blogWithoutUrl, 400)

    assert.deepStrictEqual(
      response.error,
      'Blog validation failed: url: Path `url` is required.',
      'Expected error message to indicate that URL is required'
    )
  })
  test('if a blog is submitted without title property, the system will response with a 400 Bad Request status', async () => {
    const token = await logUser()
    const response = await createBlog(token, data.blogWithoutTitle, 400)

    assert.deepStrictEqual(
      response.error,
      'Blog validation failed: title: Path `title` is required.',
      'Expected error message to indicate that title is required'
    )
  })

  test('a blog is deleted and system returns 204 No Content status', async () => {
    const token = await logUser()
    const createdBlog = await createBlog(token, data.newBlog, 201)
    await deleteBlog(token, createdBlog.id, 204)

    //newBlog in DataToTest has a especific _id, not generated by Mongo:
    const response = await Blog.findById({
      _id: data.newBlog._id,
    })

    assert.deepStrictEqual(
      response,
      null,
      'Expected response value of the deleted blog to be null'
    )
  })

  test('a blog is updated correctly and system returns 200 OK status', async () => {
    const token = await logUser()
    const createdBlog = await createBlog(token, data.newBlog, 201)

    const response = await updateBlog(createdBlog.id, token, { likes: 20 }, 200)

    assert.deepStrictEqual(
      response.likes,
      20,
      'Expected likes value to be twenty'
    )
    assert.deepStrictEqual(
      response.title,
      'New blog',
      'Expected title value to the given'
    )
    assert.deepStrictEqual(
      response.author,
      'New author',
      'Expected title value to the given'
    )
    assert.deepStrictEqual(
      response.url,
      'https://newblog.com',
      'Expected url value to the given'
    )
  })

  test('an invalid blog id is sent and system returns 404 Not Found status', async () => {
    const nonExistingId = await invalidIdGenerator()
    const token = await logUser()

    const updateResponse = await updateBlog(
      nonExistingId,
      token,
      { likes: 34 },
      404
    )

    const deleteResponse = await deleteBlog(token, nonExistingId, 404)

    assert.deepStrictEqual(
      updateResponse.error,
      'Blog not found',
      'Expected error message to indicate that the resource was not found'
    )
    assert.deepStrictEqual(
      deleteResponse.error,
      'Blog not found',
      'Expected error message to indicate that the resource was not found'
    )
  })

  test('No token is sent and the system returns 401 Unauthorized status', async () => {
    const createResponse = await createBlog(null, data.newBlog, 401)
    const deleteResponse = await deleteBlog(null, data.bigList[0]._id, 401)

    assert.deepStrictEqual(
      createResponse.error,
      'Authorization is required',
      'Expected error message to indicate that authorization is required'
    )
    assert.deepStrictEqual(
      deleteResponse.error,
      'Authorization is required',
      'Expected error message to indicate that authorization is required'
    )
  })

  test('user is not the owner of the blog and system returns 401 Unauthorized status and specific message', async () => {
    const blogOwnerToken = await logUser()
    const blog = await createBlog(blogOwnerToken, data.newBlog, 201)

    const nonBlogOwner = {
      username: 'BlogIsNotMine',
      password: 'MicasaSIesunacasa',
    }
    await listHelper.createUser(nonBlogOwner)
    const nonBlogOwnertoken = await logUser(nonBlogOwner)

    const updateResponse = await updateBlog(
      blog.id,
      nonBlogOwnertoken,
      { likes: 332 },
      401
    )
    const deleteResponse = await deleteBlog(nonBlogOwnertoken, blog.id, 401)

    assert.deepStrictEqual(
      updateResponse.error,
      'You are not the owner of this blog',
      'Expected error message to indicate that logged user is not the owner of the blog'
    )
    assert.deepStrictEqual(
      deleteResponse.error,
      'You are not the owner of this blog',
      'Expected error message to indicate that logged user is not the owner of the blog'
    )
  })

  test('a malformatted id is sent and system responds with a 400 Bad request status', async () => {
    const token = await logUser()
    const malformattedId = 'not-a-valid-id'

    const updateResponse = await updateBlog(
      malformattedId,
      token,
      { likes: 332 },
      400
    )
    const deleteResponse = await deleteBlog(token, malformattedId, 400)

    assert.deepStrictEqual(
      updateResponse.error,
      'malformatted id',
      'Expected error message to indicate that the id is in an invalid format'
    )

    assert.deepStrictEqual(
      deleteResponse.error,
      'malformatted id',
      'Expected error message to indicate that the id is in an invalid format'
    )
  })
})

//Users:
describe('users requests', () => {
  beforeEach(async () => {
    await User.deleteMany({})
    await User.insertMany(data.manyUsers)
  })

  test('users are returned as json', async () => {
    const response = await api
      .get('/api/users')
      .expect(200)
      .expect('Content-Type', /application\/json/)
    assert.ok(Array.isArray(response.body), 'Response must be an array')
  })

  test('all users are returned', async () => {
    const response = await api.get('/api/users')

    assert.strictEqual(
      response.body.length,
      data.manyUsers.length,
      'Expected the number of users to be two'
    )
  })

  test('id property verification', async () => {
    const response = await api.get('/api/users')
    response.body.forEach((user) => {
      assert.ok(user.hasOwnProperty('id'))
    })
  })

  test('a valid user is added', async () => {
    await api
      .post('/api/users')
      .send(data.newUser)
      .expect(201)
      .expect('Content-Type', /application\/json/)

    const response = await api.get('/api/users')

    assert.strictEqual(
      response.body.length,
      data.manyUsers.length + 1,
      'The number of users in the database was expected to be equal to the number of users in manyUsers plus one'
    )

    const addedUser = response.body.find(
      (user) => user.username === data.newUser.username
    )
    assert.ok(addedUser, 'The user has not been added to the database')
  })

  test('if a user is submitted without username property, the system will response with a 400 Bad Request status', async () => {
    const response = await api
      .post('/api/users')
      .send(data.newUserWithOutUsername)
      .expect(400)
      .expect('Content-Type', /application\/json/)

    assert.deepStrictEqual(
      response.body.error,
      'User validation failed: username: Path `username` is required.',
      'Expected error message to indicate that username is required'
    )
  })

  test('if a user is submitted without password property, the system will response with a 400 Bad Request status', async () => {
    const response = await api
      .post('/api/users')
      .send(data.newUserWithOutPassword)
      .expect(400)
      .expect('Content-Type', /application\/json/)
    assert.deepStrictEqual(
      response.body.error,
      'Password is required',
      'Expected error message to indicate that password is required'
    )
  })

  test('if a password of less than three characters is sent, it will respond with a 400 Bad Request status', async () => {
    const response = await api
      .post('/api/users')
      .send(data.newUserWithOutShortPass)
      .expect(400)
      .expect('Content-Type', /application\/json/)
    assert.deepStrictEqual(
      response.body.error,
      'Password must be at least 3 characters long',
      'Expected error message indicating that the minimum length of a password is three'
    )
  })

  test('if a duplicate username is sent it will respond with a 400 Bad Request status', async () => {
    const response = await api
      .post('/api/users')
      .send(data.duplicateUsername)
      .expect(400)

    assert.deepStrictEqual(
      response.body.error,
      'expected `username` to be unique',
      'Expected error message indicating that the username already exists'
    )
  })
})
after(async () => {
  await mongoose.connection.close()
})
